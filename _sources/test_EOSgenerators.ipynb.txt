{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Equation of State Generators illustration notebook\n",
    "\n",
    "First import all of the package that will be used here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import EOSgenerators.crust_EOS as crust\n",
    "import EOSgenerators.fastRMF_EoS as fast\n",
    "import EOSgenerators.RMF_EOS as RMF\n",
    "import TOVsolver.main as main\n",
    "import TOVsolver.EoS_import as EoS_import\n",
    "from matplotlib import pyplot\n",
    "import matplotlib.pyplot as plt\n",
    "import TOVsolver.constant as constant\n",
    "from itertools import repeat\n",
    "import numpy as np\n",
    "import math"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load crust EOS and prepare interface EOS\n",
    "\n",
    "Define constants, and load the crust EOS into this notebook, since when we solve the equation of state to TOV equation, we need full scope of the equation of state. Here, crust eos file is 'Tolos_crust_out.txt', while we need to times G / c^2 for energy density and G / c^4 for pressure, to make MeV/fm3 to be a natural unit, that will be easier for treatment, no need worry about G and c.\n",
    "\n",
    "Then just connect the crust part with the interface part(the part between core equation of state and crust) by a PolyInterpolate function\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = constant.c\n",
    "G = constant.G\n",
    "oneoverfm_MeV = constant.oneoverfm_MeV\n",
    "Tolos_crust_out = np.loadtxt('Tolos_crust_out.txt', delimiter='  ')\n",
    "eps_crust_T_out = Tolos_crust_out[:,3] * G / c**2\n",
    "pres_crust_T_out = Tolos_crust_out[:,4] * G / c**4\n",
    "\n",
    "eps_com, pres_com = crust.PolyInterpolate(eps_crust_T_out, pres_crust_T_out)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the paramters\n",
    "\n",
    "Defining the free prameters that we need to compute the equation of state, you could check our intro part of documentation or just check the original paper of us about details. [Huang et al,2023](https://arxiv.org/abs/2303.17518)\n",
    "\n",
    "After defined the equation of state parameters, we could call the 'compute_EOS' function from RMF, to compute full core equation of state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_sig = (495.0)/oneoverfm_MeV\n",
    "m_w = 3.96544\n",
    "m_rho = 3.86662\n",
    "\n",
    "g_sigma = math.sqrt(107.5751)\n",
    "g_omega = math.sqrt(182.3949)\n",
    "g_rho = math.sqrt(206.4260)\n",
    "\n",
    "kappa = 3.09114168/197.33\n",
    "lambda_0 = -0.00168015405\n",
    "zeta = 0.024\n",
    "Lambda_w = 0.045\n",
    "theta = np.array([m_sig, m_w, m_rho, g_sigma, g_omega, g_rho, kappa, lambda_0, zeta, Lambda_w])\n",
    "eps, pres = RMF.compute_EOS(eps_com, pres_com, theta)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Connecting Core and crust EOS\n",
    "\n",
    "These two line can easily connect the Equation of state we computed for core part by setting the parameters and the crust equation of state, to a full equation of state that prepared for next step output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "eps_total = np.array([*eps_com, *eps])\n",
    "pres_total = np.array([*pres_com, *pres])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here below is one of the possiblity, use our defined function, 'OutputMR' to compute out what the mass radius curve corresponding to this equation of state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mass Radius file will be generated and stored as  2-d array. The first column is Radius, second one is mass\n"
     ]
    }
   ],
   "source": [
    "MR = main.OutputMR('',eps_total,pres_total).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1, figsize=(9,6))\n",
    "ax.plot(MR[0], MR[1],lw=2)\n",
    "ax.set_ylabel(r'M [$M_{\\odot}$]', fontsize=16)\n",
    "ax.set_xlabel('R [km]', fontsize=16)\n",
    "ax.set_xlim(8., 20.)\n",
    "ax.set_ylim(0,3)\n",
    "ax.tick_params(top=1,right=1, which='both', direction='in', labelsize=14)\n",
    "ax.tick_params(top=1,right=1, which='both', direction='in', labelsize=14)\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "e4481115b400f107b26d360e6549f546bb0e8bc1af70e4e66085bfa77a017a39"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
